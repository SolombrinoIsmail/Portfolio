{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/sidenav\";\nimport * as i4 from \"@angular/material/toolbar\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/list\";\n\nfunction ToolbarComponent_button_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ToolbarComponent_button_19_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      i0.ɵɵnextContext();\n\n      const _r0 = i0.ɵɵreference(3);\n\n      return i0.ɵɵresetView(_r0.toggle());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 6);\n    i0.ɵɵtext(2, \"menu\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nconst _c0 = [\"*\"];\nexport class ToolbarComponent {\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n  }\n\n}\n\nToolbarComponent.ɵfac = function ToolbarComponent_Factory(t) {\n  return new (t || ToolbarComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n};\n\nToolbarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ToolbarComponent,\n  selectors: [[\"app-toolbar\"]],\n  ngContentSelectors: _c0,\n  decls: 23,\n  vars: 12,\n  consts: [[1, \"sidenav-container\"], [\"fixedInViewport\", \"\", 1, \"sidenav\", 3, \"mode\", \"opened\"], [\"drawer\", \"\"], [\"mat-list-item\", \"\", \"href\", \"#\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\"], [\"aria-label\", \"Side nav toggle icon\"]],\n  template: function ToolbarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"mat-sidenav-container\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵelementStart(2, \"mat-sidenav\", 1, 2);\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelement(7, \"mat-toolbar\");\n      i0.ɵɵelementStart(8, \"mat-nav-list\")(9, \"a\", 3);\n      i0.ɵɵtext(10, \"About Me\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"a\", 3);\n      i0.ɵɵtext(12, \"Projects\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"a\", 3);\n      i0.ɵɵtext(14, \"Career\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"a\", 3);\n      i0.ɵɵtext(16, \"Contact\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(17, \"mat-sidenav-content\")(18, \"mat-toolbar\");\n      i0.ɵɵtemplate(19, ToolbarComponent_button_19_Template, 3, 0, \"button\", 4);\n      i0.ɵɵpipe(20, \"async\");\n      i0.ɵɵelementStart(21, \"span\");\n      i0.ɵɵtext(22, \"Solombrino Ismail\");\n      i0.ɵɵelementEnd()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"mode\", i0.ɵɵpipeBind1(5, 6, ctx.isHandset$) ? \"over\" : \"side\")(\"opened\", i0.ɵɵpipeBind1(6, 8, ctx.isHandset$) === false);\n      i0.ɵɵattribute(\"role\", i0.ɵɵpipeBind1(4, 4, ctx.isHandset$) ? \"dialog\" : \"navigation\");\n      i0.ɵɵadvance(17);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(20, 10, ctx.isHandset$));\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatSidenav, i3.MatSidenavContainer, i3.MatSidenavContent, i4.MatToolbar, i5.MatButton, i6.MatIcon, i7.MatNavList, i7.MatListItem, i2.AsyncPipe],\n  styles: [\".mat-sidenav-container[_ngcontent-%COMP%] {\\n  background-color: rgb(0, 0, 0);\\n  height: 100%;\\n}\\n\\n.mat-sidenav[_ngcontent-%COMP%]{\\n  background-color: rgb(0, 0, 0);\\n  border:0;\\n}\\n\\nmat-toolbar[_ngcontent-%COMP%]{\\n  background-color: rgb(0,0,0);\\n}\\n\\nspan[_ngcontent-%COMP%] {\\n  margin: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvb2xiYXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBO0VBQ0UsOEJBQThCO0VBQzlCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLDhCQUE4QjtFQUM5QixRQUFRO0FBQ1Y7O0FBRUE7RUFDRSw0QkFBNEI7QUFDOUI7O0FBRUE7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoidG9vbGJhci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbi5tYXQtc2lkZW5hdi1jb250YWluZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwgMCwgMCk7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuLm1hdC1zaWRlbmF2e1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwgMCwgMCk7XG4gIGJvcmRlcjowO1xufVxuXG5tYXQtdG9vbGJhcntcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAsMCwwKTtcbn1cblxuc3BhbiB7XG4gIG1hcmdpbjogYXV0bztcbn0iXX0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAA6BA,WAA7B,QAAgD,qBAAhD;AAEA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;;;;;;;;;;;;;;ICkBMC;IAIEA;MAAAA;MAAAA;;MAAA;;MAAA,OAASA,4BAAT;IAAwB,CAAxB;IAGAA;IAA4CA;IAAIA;;;;;ADlBxD,OAAM,MAAOC,gBAAP,CAAuB;EAQ3BC,YAAoBC,kBAApB,EAA0D;IAAtC;IAPpB,kBAAkC,KAAKA,kBAAL,CAC/BC,OAD+B,CACvBP,WAAW,CAACQ,OADW,EAE/BC,IAF+B,CAG9BR,GAAG,CAAES,MAAD,IAAYA,MAAM,CAACC,OAApB,CAH2B,EAI9BT,WAAW,EAJmB,CAAlC;EAO8D;;AARnC;;;mBAAhBE,kBAAgBD;AAAA;;;QAAhBC;EAAgBQ;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MCV7Bd;MACEA;MACAA;;;;MAQEA;MACAA,qCAAc,CAAd,EAAc,GAAd,EAAc,CAAd;MAC4BA;MAAQA;MAClCA;MAA0BA;MAAQA;MAClCA;MAA0BA;MAAMA;MAChCA;MAA0BA;MAAOA;MAIrCA,6CAAqB,EAArB,EAAqB,aAArB;MAEIA;;MASAA;MAAMA;MAAiBA;;;;MAvBzBA;MAAAA,8EAA+C,QAA/C,EAA+CA,8CAA/C;MADAA;MAoBKA;MAAAA","names":["Breakpoints","map","shareReplay","i0","ToolbarComponent","constructor","breakpointObserver","observe","Handset","pipe","result","matches","selectors","ngContentSelectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/ismail/Developer/Portfolio/MyPortfolio/src/app/Components/toolbar/toolbar.component.ts","/Users/ismail/Developer/Portfolio/MyPortfolio/src/app/Components/toolbar/toolbar.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.css'],\n})\nexport class ToolbarComponent {\n  isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(\n      map((result) => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <ng-content></ng-content>\n  <mat-sidenav\n    #drawer\n    class=\"sidenav\"\n    fixedInViewport\n    [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n    [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n    [opened]=\"(isHandset$ | async) === false\"\n  >\n    <mat-toolbar></mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item href=\"#\">About Me</a>\n      <a mat-list-item href=\"#\">Projects</a>\n      <a mat-list-item href=\"#\">Career</a>\n      <a mat-list-item href=\"#\">Contact</a>\n    </mat-nav-list>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <mat-toolbar>\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\"\n      >\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span>Solombrino Ismail</span>\n    </mat-toolbar>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"]},"metadata":{},"sourceType":"module"}